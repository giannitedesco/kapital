#!/usr/bin/python

from argparse import ArgumentParser
from monop.gameconf import GameConf
from monop.gamestate import GameState
from monop.player import Player
from monop.simplestrategy import SimpleStrategy
from monop.markovstrategy import MarkovStrategy 
from copy import copy
import sys

def game_from_conf(c, player):
	gs = GameState()
	enemy = Player()
	enemy.name = 'Enemy'
	enemy.playerid = player.playerid + 1
	gs.game_init([player, enemy])

	for i, e in enumerate(c.estates):
		e = copy(e)
		e.estateid = i
		if e.group >= 0:
			g = c.groups[e.group]
			e.houseprice = g.houseprice
			if not e.price:
				e.price = g.price
			e.mortgageprice = int(e.price / 2.0)
			e.unmortgageprice = int((e.price/2.0) * 1.1)
			e.sellhouseprice = int((e.houseprice)/2.0)
		gs.estates[i] = e

	for i, g in enumerate(c.groups):
		g = copy(g)
		g.groupid = i
		gs.groups[g.groupid] = g
	gs.game_on()
	return gs

def main():
	opts = ArgumentParser(description='Test a game strategy')
	opts.add_argument('cash', metavar='cash', type=int,
				help = 'Amount of cash')
	opts.add_argument('properties', metavar='property', type=str,
				nargs='+',
				help = 'Properties owned')
	opts.add_argument('--config',
				metavar = 'config',
				type = str,
				default = './configs/london.conf',
				help = 'monopd config file')
	opts.add_argument('--print-tables',
				action = 'store_true',
				default = False,
				help = 'Print statistics tables')
	opts.add_argument('--rij',
				action = 'store_true',
				default = False,
				help = 'Remain-in-jail model')

	args = opts.parse_args()

	print 'Loading config fromm: %s'%args.config
	c = GameConf(open(args.config))

	print 'Using %s strategy'%(args.rij and 'remain-in-jail' \
					or 'leave-jail')

	p = Player()
	p.playerid = 0
	p.name = 'player'
	p.money = args.cash
	gs = game_from_conf(c, p)
	#gs.estates[6].houses = 1
	#gs.estates[5].mortgaged = True

	s = MarkovStrategy(c)
	def strategy_msg(it, msg, tags):
		color = {
			'default':(0, 0),
			'dark red':(0, 31),
			'dark green':(0, 32),
			'dark yellow':(0, 33),
			'dark blue':(0, 34),
			'dark magenta':(0, 35),
			'dark cyan':(0, 36),
			'light gray':(0, 37),
			'light grey':(0, 37),
			'dark gray':(0, 38),
			'dark grey':(0, 38),
			'red':(1, 31),
			'green':(1, 32),
			'yellow':(1, 33),
			'blue':(1,34),
			'magenta':(1,35),
			'purple':(1,35),
			'cyan':(1, 36),
			'white':(1, 37),
		}
		b, c = color['default']
		for t in tags:
			if t == 'bold':
				b,c = True, 40
			else:
				(b, c) = color.get(t, (b, c))
		sys.stdout.write('\033[%u;%dm%s\033[0m'%(b, c, msg))
	m = []
	def mortgage(it, estateid):
		m.append(('mortgage', estateid))
	def unmortgage(it, estateid):
		m.append(('unmortgage', estateid))
	def buy_house(it, estateid):
		m.append(('buy-house', estateid))
	def sell_house(it, estateid):
		m.append(('sell-house', estateid))
	s.connect('msg', strategy_msg)
	s.connect('mortgage', mortgage)
	s.connect('unmortgage', unmortgage)
	s.connect('buy-house', buy_house)
	s.connect('sell-house', sell_house)
	s.game_on(gs)
	
	print
	print 'Cash amount: %d'%args.cash
	print 'Properties owned: %s'%(', '.join(map(str, args.properties)))
	for a in args.properties:
		mort = False
		nh = 0
		try:
			eid, nh = a.split(':',1)
		except ValueError:
			if a[-1] == 'm':
				mort = True
				eid = a[:-1]
			else:
				eid = a
		eid = int(eid)
		nh = int(nh)
		e = gs.estates[eid]
		if e.group < 0:
			raise Exception('%s can\'t be owned'%e.name)
		e.owner = p.playerid
		e.houses = nh
		e.mortgaged = mort
		print ' - %s%s%s'%(e.name,
					mort and ' (mortgaged)' or '',
					nh and ' (%u houses)'%nh or '')
	print

	print 'Simulating:'
	s.manage_estates(p)
	print

	# TODO: validate the solution abides by the rules
	print 'Solution:'
	for (move, estateid) in m:
		e = gs.estates[estateid]
		g = gs.groups[e.group]
		print move, estateid, e.name
		if move == 'buy-house':
			p.money -= e.houseprice
			e.houses += 1
		elif move == 'sell-house':
			p.money += e.sellhouseprice
			e.houses -= 1
		elif move == 'mortgage':
			p.money += e.mortgageprice
			e.mortgaged = True
		elif move == 'unmortgage':
			p.money -= e.unmortgageprice
			e.mortgaged = False
	print
	
	print 'Cash remaining: %u'%p.money
	
if __name__ == '__main__':
	main()
	raise SystemExit, 0
