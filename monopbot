#!/usr/bin/python

import gobject, gtk, pango
from linesock import LineSock
from xmlhelper import parse_xml_string
from collections import namedtuple

MonopGame = namedtuple('MonopGame', ['gameid', 'name', 'gametype', 'desc'])
MonopPlayer = namedtuple('MonopPlayer', ['playerid', 'game', 'cookie',
						'host', 'name'])

class MonopError(Exception):
	pass

class MonopClient:
	def gameupdate(self, xml):
		try:
			g = MonopGame(gameid = int(xml['gameid']),
				name = xml['name'],
				gametype = xml['gametype'],
				desc = xml.get('description',''))
		except KeyError, ValueError:
			raise MonopError
		self.games[g.name] = g
		self.msg('game: ', ['bold'])
		self.msg('%s, %s, %s\n'%(g.name, g.gametype, g.desc))
		return

	def playerupdate(self, xml):
		try:
			p = MonopPlayer(playerid = int(xml['playerid']),
				game = int(xml['game']),
				cookie = xml.get('cookie',None),
				host = xml['host'],
				name = xml['name'])
		except KeyError, ValueError:
			raise MonopError
		self.players[p.playerid] = p
		self.msg('player: ', ['bold'])
		self.msg('%s (%s) @ %s\n'%(p.name, p.playerid,
						p.host))
		return

		return

	def client(self, xml):
		try:
			pid = int(xml['playerid'])
			cookie = xml['cookie']
		except KeyError, ValueError:
			raise MonopError

		self.msg('playerid %d, cookie = \'%s\'\n'%(pid, cookie))
		self.pid = pid
		self.cookie = cookie

	def server(self, xml):
		try:
			ver = xml['version']
		except KeyError:
			raise MonopError
		self.msg('server version: %s\n'%ver)
		self.sock.send('.n%s\n'%self.nick)

	def abort(self):
		self.sock = None
		self.pid = None
		self.cookie = None
		self.games = {}
		self.players = {}

	def __init__(self, msg, nick = 'MrMonopoly'):
		self.msg = msg
		self.nick = nick
		self.abort()

	def dumpxml(self, n, depth = 0):
		"Dump a XMLNode DOM"

		def indent(depth):
			return ''.join([' ' for x in xrange(depth)])
		self.msg('%s+ %s\n'%(indent(depth), n.name))
		for (k, v) in n.attrib.items():
			self.msg('%s - %s = %s\n'%(indent(depth), k, v))
		if n.text is not None:
			self.msg('%so %s\n'%(indent(depth), n.text))
		for x in n.children:
			self.dumpxml(x, depth + 1)

	def connect_to(self, host, port):
		def sockerr(sock, op, msg):
			self.info_msg('*** %s: %s:%d: %s\n'%(op,
					sock.peer[0],
					sock.peer[1],
					msg), ['bold', 'purple'])
			self.sock = None

		def connected(sock):
			self.msg('*** Connected: %s:%d\n'%(
					sock.peer[0],
					sock.peer[1]), ['bold', 'purple'])

		def disconnected(sock):
			self.msg('*** Disonnected: %s:%d\n'%(
					sock.peer[0],
					sock.peer[1]), ['bold', 'purple'])
			self.sock = None

		def sock_in(sock, msg):
			def transition(xml):
				def ignore(xml):
					return
				disp = {
					'client':self.client,
					'server':self.server,
					'updategamelist':ignore,
					'playerupdate':self.playerupdate,
					'gameupdate':self.gameupdate,
				}
				if xml.name != 'monopd':
					raise MonopError
				for x in xml.children:
					disp.get(x.name, self.dumpxml)(x)

			try:
				xml = parse_xml_string(msg)
			except:
				self.msg('Barfed on XML: %s\n'%msg, ['red'])
			try:
				transition(xml)
			except MonopError, e:
				self.msg('Barfed on message:\n', ['red'])
				self.dumpxml(xml)
				self.abort()

		self.sock = LineSock()
		self.sock.connect('data-in', sock_in)
		self.sock.connect('connected', connected)
		self.sock.connect('disconnected', disconnected)
		self.sock.connect('error', sockerr)
		self.sock.connect_to(host, port)

class BotLog(gtk.TextView):
	def __setup_tags(self, buf):
		tag = buf.create_tag('font')
		tag.set_property('font', 'Lucida Console 8')

		tag = buf.create_tag('bold')
		tag.set_property('weight', pango.WEIGHT_BOLD)

		for x in ['red', 'blue', 'green',
				'cyan', 'magenta', 'yellow',
				'purple', 'black',
				'dark blue', 'dark green']:
			tag = buf.create_tag(x)
			tag.set_property('foreground', x)
			tag.set_property('foreground-set', True)

	def __init__(self):
		gtk.TextView.__init__(self)
		#self.set_border_window_size(gtk.TEXT_WINDOW_LEFT, 8)
		self.set_editable(False)
		self.set_cursor_visible(False)
		self.set_wrap_mode(gtk.WRAP_WORD)
		self.__setup_tags(self.get_buffer())


	def msg(self, msg, tags = []):
		from sys import stdout

		tags.append('font')
		buf = self.get_buffer()
		i = buf.get_iter_at_offset(buf.get_char_count())
		buf.place_cursor(i)
		buf.insert_with_tags_by_name(i, msg, *tags)
		i = buf.get_iter_at_offset(buf.get_char_count())
		buf.place_cursor(i)

		stdout.write(msg)
		if not '\n' in msg:
			return

		self.scroll_to_iter(i, 0.0)

class MainWin(gtk.Window):
	def destroy(self, *_):
		gtk.Window.destroy(self)
		if self.in_main:
			gtk.mainquit()
			self.in_main = False

	def main(self):
		self.in_main = True
		gtk.main()

	def __init__(self):
		gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
		self.in_main = False
		self.connect('destroy', self.destroy)
		self.set_default_size(640, 480)
		self.set_title('monopbot')

		agr = gtk.AccelGroup()
		(k, m) = gtk.accelerator_parse('<Control>Q')
		agr.connect_group(k, m, gtk.ACCEL_VISIBLE, self.destroy)
		self.add_accel_group(agr)

		self.log = BotLog()
		self.client = MonopClient(self.log.msg)
		self.client.connect_to('localhost', 11234)

		scr = gtk.ScrolledWindow()
		scr.set_policy(gtk.POLICY_NEVER, gtk.POLICY_AUTOMATIC)
		scr.add(self.log)

		self.add(scr)
		self.show_all()

if __name__ == '__main__':
	x = MainWin()
	x.main()
