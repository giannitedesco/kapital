#!/usr/bin/python

import gobject, gtk, pango
from os import listdir
from cairo import ImageSurface
from monop import Board, Client as MonopClient

class MonopDisplay(gtk.VBox):
	def __init__(self, cmd):
		gtk.VBox.__init__(self)
		self.cmd = cmd
		self.text = gtk.TextView()
		self.buttonbar = gtk.HBox()
		self.pack_start(self.text, True, True)
		self.pack_start(self.buttonbar, False, False)

		self.text.set_editable(False)
		self.text.set_cursor_visible(False)
		self.text.set_wrap_mode(gtk.WRAP_WORD)
		self.text.set_cursor_visible(False)
		buf = self.text.get_buffer()
		i = buf.get_iter_at_offset(0)
		self.end = buf.create_mark(None, i, left_gravity = False)

	def display(self, text = '', cleartext = False,
			clearbuttons = False, estateid = -1):
		buf = self.text.get_buffer()

		if clearbuttons:
			def delbutton(button, *_):
				self.buttonbar.remove(button)
			self.buttonbar.foreach(delbutton)

		if cleartext:
			buf.set_text('')
			i = buf.get_iter_at_offset(0)
			buf.move_mark(self.end, i)

		i = buf.get_iter_at_offset(buf.get_char_count())
		buf.insert(i, text + '\n')

		i = buf.get_iter_at_offset(buf.get_char_count())
		buf.move_mark(self.end, i)
		self.text.scroll_mark_onscreen(self.end)
		buf.place_cursor(i)

	def add_button(self, caption, command, enabled = True):
		def closure(window, event, cmd):
			self.cmd(cmd)
		b = gtk.Button(caption)
		b.set_sensitive(enabled)
		b.connect('button-press-event', closure, command)
		self.buttonbar.add(b)
		self.buttonbar.show_all()

class BotLog(gtk.TextView):
	def __setup_tags(self, buf):
		tag = buf.create_tag('font')
		tag.set_property('font', 'Lucida Console 8')

		tag = buf.create_tag('bold')
		tag.set_property('weight', pango.WEIGHT_BOLD)

		for x in ['red', 'blue', 'green',
				'cyan', 'magenta', 'yellow',
				'purple', 'black',
				'dark blue', 'dark green']:
			tag = buf.create_tag(x)
			tag.set_property('foreground', x)
			tag.set_property('foreground-set', True)

	def __init__(self):
		gtk.TextView.__init__(self)
		#self.set_border_window_size(gtk.TEXT_WINDOW_LEFT, 8)
		self.set_editable(False)
		self.set_cursor_visible(False)
		self.set_wrap_mode(gtk.WRAP_WORD)
		self.__setup_tags(self.get_buffer())

		buf = self.get_buffer()
		i = buf.get_iter_at_offset(0)
		self.end = buf.create_mark(None, i, left_gravity = False)


	def msg(self, msg, tags = []):
		from sys import stdout

		tags.append('font')
		buf = self.get_buffer()
		i = buf.get_iter_at_offset(buf.get_char_count())
		buf.insert_with_tags_by_name(i, msg, *tags)

		i = buf.get_iter_at_offset(buf.get_char_count())
		buf.move_mark(self.end, i)
		self.scroll_mark_onscreen(self.end)
		buf.place_cursor(i)

		stdout.write(msg)

class MainWin(gtk.Window):
	def destroy(self, *_):
		if self.client is not None:
			self.client.quit()
		gtk.Window.destroy(self)
		if self.in_main:
			gtk.mainquit()
			self.in_main = False

	def main(self):
		self.in_main = True
		gtk.main()

	def enter(self, entry):
		s = entry.get_text()
		entry.set_text('')
		if len(s):
			self.client.cmd(s)

	def cmd(self, cmd):
		if self.client is not None:
			self.client.cmd(cmd)

	def parse_rgb(self, color):
		if len(color) < 7 or color[0] != '#':
			return None

		r = int(color[1:3], 16) / 255.0
		g = int(color[3:5], 16) / 255.0
		b = int(color[5:7], 16) / 255.0
		return (r, g, b)


	def draw_color_band(self, cr, x, y, r, g, b):
		cr.set_source_rgb(r, g, b)
		cr.move_to(0, 0)
		cr.line_to(0, y / 5.0)
		cr.line_to(x, y / 5.0)
		cr.line_to(x, 0)
		cr.fill()

		cr.set_source_rgb(0, 0, 0)
		cr.move_to(0, y / 5.0)
		cr.line_to(x, y / 5.0)
		cr.stroke()

	def draw_img(self, cr, img, x, y, w, h, scale = True):
		ix = img.get_width()
		iy = img.get_height()

		if scale:
			# FIXME: assume square
			r = min(w, h)
			x += (w - r) / 2
			y += (h - r) / 2
			w = h = r

		cr.save()
		cr.rectangle(x, y, w, h)
		cr.clip()
		cr.new_path()

		cr.translate(x, y)
		cr.scale(w/ix, h/iy);
		cr.set_source_surface(img, 0, 0)
		cr.paint()
		cr.restore()

	def draw_owner(self, cr, x, y, p, band):
		cr.save()
		if band:
			cr.translate(0, y / 5.0)
		y = y / 5.0
		space = (x - y) / 2.0
		self.draw_img(cr, self.avatar[p.image], space, 0, y, y)
		cr.restore()
		return

	def draw_player_tokens(self, cr, x, y, p = []):
		cr.save()
		cr.translate(0, y / 2.5)
		y -= y / 2.5

		img = map(lambda p:p.image, p)

		for tok in img:
			self.draw_img(cr, self.avatar[tok], 0, 0, x, y)
		cr.restore()

	def draw_box(self, cr, (x, y), boxid):
		if not self.client.estates.has_key(boxid):
			(ascent, descent, height,
					max_x_advance, max_y_advance) = \
				cr.font_extents()
			cr.move_to(x / 20.0, height)
			cr.show_text('%d'%boxid)
			return

		# look at the estate
		e = self.client.estates[boxid]

		# grab the estate group color
		g = self.client.groups.get(e.group, None)
		col = self.parse_rgb(e.color)
		if col is not None:
			self.draw_color_band(cr, x, y, *col)
			band = True
		else:
			band = False

		# draw player tokens
		p = filter(lambda x:x.location == boxid,
				self.client.players.values())
		self.draw_player_tokens(cr, x, y, p)

		# draw ownership token
		p = self.client.players.get(e.owner, None)
		if p is not None and e.can_be_owned:
			self.draw_owner(cr, x, y, p, band)

	def redraw(self, cl):
		self.board.redraw()

	def msg(self, cl, *_):
		self.log.msg(*_)

	def __init__(self):
		gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
		self.in_main = False
		self.client = None
		self.connect('destroy', self.destroy)
		self.set_default_size(640, 480)
		self.set_title('monopbot')

		self.avatar = {}
		for x in listdir('avatars'):
			surf = ImageSurface.create_from_png('avatars/%s'%x)
			self.avatar[x] = surf

		agr = gtk.AccelGroup()
		(k, m) = gtk.accelerator_parse('<Control>Q')
		agr.connect_group(k, m, gtk.ACCEL_VISIBLE, self.destroy)
		(k, m) = gtk.accelerator_parse('<Control>W')
		agr.connect_group(k, m, gtk.ACCEL_VISIBLE, self.destroy)
		self.add_accel_group(agr)

		scr = gtk.ScrolledWindow()
		scr.set_policy(gtk.POLICY_NEVER, gtk.POLICY_AUTOMATIC)
		self.log = BotLog()
		scr.add(self.log)

		entry = gtk.Entry()
		entry.connect('activate', self.enter)

		self.board = Board(self.draw_box)

		nb = gtk.Notebook()
		nb.append_page(scr, gtk.Label('Log'))
		nb.append_page(self.board, gtk.Label('Game State'))

		vb = gtk.VBox()
		vb.pack_start(nb, True, True)
		vb.pack_start(entry, False, False)

		self.disp = MonopDisplay(self.cmd)
		self.client = MonopClient(self.disp)

		self.client.connect('msg', self.msg)
		self.client.connect('updated', self.redraw)

		hb = gtk.HPaned()
		hb.add1(vb)
		hb.add2(self.disp)

		self.add(hb)
		self.show_all()

		self.client.connect_to('localhost', 11234)

if __name__ == '__main__':
	x = MainWin()
	x.main()
