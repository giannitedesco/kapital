#!/usr/bin/python

import gobject, gtk, pango
from monop import Client as MonopClient

class BotLog(gtk.TextView):
	def __setup_tags(self, buf):
		tag = buf.create_tag('font')
		tag.set_property('font', 'Lucida Console 8')

		tag = buf.create_tag('bold')
		tag.set_property('weight', pango.WEIGHT_BOLD)

		for x in ['red', 'blue', 'green',
				'cyan', 'magenta', 'yellow',
				'purple', 'black',
				'dark blue', 'dark green']:
			tag = buf.create_tag(x)
			tag.set_property('foreground', x)
			tag.set_property('foreground-set', True)

	def __init__(self):
		gtk.TextView.__init__(self)
		#self.set_border_window_size(gtk.TEXT_WINDOW_LEFT, 8)
		self.set_editable(False)
		self.set_cursor_visible(False)
		self.set_wrap_mode(gtk.WRAP_WORD)
		self.__setup_tags(self.get_buffer())


	def msg(self, msg, tags = []):
		from sys import stdout

		tags.append('font')
		buf = self.get_buffer()
		i = buf.get_iter_at_offset(buf.get_char_count())
		buf.place_cursor(i)
		buf.insert_with_tags_by_name(i, msg, *tags)
		i = buf.get_iter_at_offset(buf.get_char_count())
		buf.place_cursor(i)

		stdout.write(msg)
		if not '\n' in msg:
			return

		self.scroll_to_iter(i, 0.0)

class MainWin(gtk.Window):
	def destroy(self, *_):
		self.client.quit()
		gtk.Window.destroy(self)
		if self.in_main:
			gtk.mainquit()
			self.in_main = False

	def main(self):
		self.in_main = True
		gtk.main()

	def enter(self, entry):
		s = entry.get_text()
		entry.set_text('')
		if len(s):
			self.client.cmd(s)

	def __init__(self):
		gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
		self.in_main = False
		self.connect('destroy', self.destroy)
		self.set_default_size(640, 480)
		self.set_title('monopbot')

		agr = gtk.AccelGroup()
		(k, m) = gtk.accelerator_parse('<Control>Q')
		agr.connect_group(k, m, gtk.ACCEL_VISIBLE, self.destroy)
		(k, m) = gtk.accelerator_parse('<Control>W')
		agr.connect_group(k, m, gtk.ACCEL_VISIBLE, self.destroy)
		self.add_accel_group(agr)

		self.log = BotLog()
		self.client = MonopClient(self.log.msg)
		self.client.connect_to('localhost', 11234)

		scr = gtk.ScrolledWindow()
		scr.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		scr.add(self.log)

		entry = gtk.Entry()
		entry.connect('activate', self.enter)

		vb = gtk.VBox()
		vb.pack_start(scr, True, True)
		vb.pack_start(entry, False, False)

		self.add(vb)
		self.show_all()

if __name__ == '__main__':
	x = MainWin()
	x.main()
